// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	post "github.com/vladovsiychuk/microservice-demo-go/internal/post"
)

// PostRepositoryI is an autogenerated mock type for the PostRepositoryI type
type PostRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *PostRepositoryI) Create(_a0 *post.Post) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*post.Post) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByKey provides a mock function with given fields: _a0, postId
func (_m *PostRepositoryI) FindByKey(_a0 *post.Post, postId uuid.UUID) error {
	ret := _m.Called(_a0, postId)

	if len(ret) == 0 {
		panic("no return value specified for FindByKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*post.Post, uuid.UUID) error); ok {
		r0 = rf(_a0, postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *PostRepositoryI) Update(_a0 *post.Post) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*post.Post) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostRepositoryI creates a new instance of PostRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepositoryI {
	mock := &PostRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
