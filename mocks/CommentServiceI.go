// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	comment "github.com/vladovsiychuk/microservice-demo-go/internal/comment"

	uuid "github.com/google/uuid"
)

// CommentServiceI is an autogenerated mock type for the CommentServiceI type
type CommentServiceI struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: req, postId
func (_m *CommentServiceI) CreateComment(req comment.CommentRequest, postId uuid.UUID) (comment.CommentI, error) {
	ret := _m.Called(req, postId)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 comment.CommentI
	var r1 error
	if rf, ok := ret.Get(0).(func(comment.CommentRequest, uuid.UUID) (comment.CommentI, error)); ok {
		return rf(req, postId)
	}
	if rf, ok := ret.Get(0).(func(comment.CommentRequest, uuid.UUID) comment.CommentI); ok {
		r0 = rf(req, postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(comment.CommentI)
		}
	}

	if rf, ok := ret.Get(1).(func(comment.CommentRequest, uuid.UUID) error); ok {
		r1 = rf(req, postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCommentsByPostId provides a mock function with given fields: postId
func (_m *CommentServiceI) FindCommentsByPostId(postId uuid.UUID) ([]comment.CommentI, error) {
	ret := _m.Called(postId)

	if len(ret) == 0 {
		panic("no return value specified for FindCommentsByPostId")
	}

	var r0 []comment.CommentI
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]comment.CommentI, error)); ok {
		return rf(postId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []comment.CommentI); ok {
		r0 = rf(postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comment.CommentI)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: req, commentId
func (_m *CommentServiceI) UpdateComment(req comment.CommentRequest, commentId uuid.UUID) (comment.CommentI, error) {
	ret := _m.Called(req, commentId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 comment.CommentI
	var r1 error
	if rf, ok := ret.Get(0).(func(comment.CommentRequest, uuid.UUID) (comment.CommentI, error)); ok {
		return rf(req, commentId)
	}
	if rf, ok := ret.Get(0).(func(comment.CommentRequest, uuid.UUID) comment.CommentI); ok {
		r0 = rf(req, commentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(comment.CommentI)
		}
	}

	if rf, ok := ret.Get(1).(func(comment.CommentRequest, uuid.UUID) error); ok {
		r1 = rf(req, commentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentServiceI creates a new instance of CommentServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentServiceI {
	mock := &CommentServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
