// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	comment "github.com/vladovsiychuk/microservice-demo-go/internal/comment"

	post "github.com/vladovsiychuk/microservice-demo-go/internal/post"
)

// PostAggregateI is an autogenerated mock type for the PostAggregateI type
type PostAggregateI struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: _a0
func (_m *PostAggregateI) AddComment(_a0 *comment.Comment) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*comment.Comment) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *PostAggregateI) Update(_a0 *post.Post) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*post.Post) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateComment provides a mock function with given fields: _a0
func (_m *PostAggregateI) UpdateComment(_a0 *comment.Comment) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*comment.Comment) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostAggregateI creates a new instance of PostAggregateI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostAggregateI(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostAggregateI {
	mock := &PostAggregateI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
