// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	backendforfrontend "github.com/vladovsiychuk/microservice-demo-go/internal/backendforfrontend"
	comment "github.com/vladovsiychuk/microservice-demo-go/internal/comment"

	mock "github.com/stretchr/testify/mock"

	post "github.com/vladovsiychuk/microservice-demo-go/internal/post"

	uuid "github.com/google/uuid"
)

// BffServiceI is an autogenerated mock type for the BffServiceI type
type BffServiceI struct {
	mock.Mock
}

// AddCommentToPostAggregate provides a mock function with given fields: _a0
func (_m *BffServiceI) AddCommentToPostAggregate(_a0 *comment.Comment) {
	_m.Called(_a0)
}

// CreatePostAggregate provides a mock function with given fields: _a0
func (_m *BffServiceI) CreatePostAggregate(_a0 *post.Post) {
	_m.Called(_a0)
}

// GetPostAggregate provides a mock function with given fields: postId
func (_m *BffServiceI) GetPostAggregate(postId uuid.UUID) (backendforfrontend.PostAggregateI, error) {
	ret := _m.Called(postId)

	if len(ret) == 0 {
		panic("no return value specified for GetPostAggregate")
	}

	var r0 backendforfrontend.PostAggregateI
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (backendforfrontend.PostAggregateI, error)); ok {
		return rf(postId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) backendforfrontend.PostAggregateI); ok {
		r0 = rf(postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backendforfrontend.PostAggregateI)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommentInPostAggregate provides a mock function with given fields: _a0
func (_m *BffServiceI) UpdateCommentInPostAggregate(_a0 *comment.Comment) {
	_m.Called(_a0)
}

// UpdatePostAggregate provides a mock function with given fields: _a0
func (_m *BffServiceI) UpdatePostAggregate(_a0 *post.Post) {
	_m.Called(_a0)
}

// NewBffServiceI creates a new instance of BffServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBffServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *BffServiceI {
	mock := &BffServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
