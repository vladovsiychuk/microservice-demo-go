// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	auth "github.com/vladovsiychuk/microservice-demo-go/internal/auth"

	uuid "github.com/google/uuid"
)

// SessionTokenRepositoryI is an autogenerated mock type for the SessionTokenRepositoryI type
type SessionTokenRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: sessionToken
func (_m *SessionTokenRepositoryI) Create(sessionToken auth.SessionTokenI) error {
	ret := _m.Called(sessionToken)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.SessionTokenI) error); ok {
		r0 = rf(sessionToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: sessionToken
func (_m *SessionTokenRepositoryI) Delete(sessionToken auth.SessionTokenI) error {
	ret := _m.Called(sessionToken)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.SessionTokenI) error); ok {
		r0 = rf(sessionToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: sessionTokenId
func (_m *SessionTokenRepositoryI) FindById(sessionTokenId uuid.UUID) (auth.SessionTokenI, error) {
	ret := _m.Called(sessionTokenId)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 auth.SessionTokenI
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (auth.SessionTokenI, error)); ok {
		return rf(sessionTokenId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) auth.SessionTokenI); ok {
		r0 = rf(sessionTokenId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.SessionTokenI)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(sessionTokenId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSessionTokenRepositoryI creates a new instance of SessionTokenRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionTokenRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionTokenRepositoryI {
	mock := &SessionTokenRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
