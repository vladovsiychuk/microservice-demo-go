// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	auth "github.com/vladovsiychuk/microservice-demo-go/internal/auth"

	uuid "github.com/google/uuid"
)

// AuthServiceI is an autogenerated mock type for the AuthServiceI type
type AuthServiceI struct {
	mock.Mock
}

// GenerateJwtAndSessionTokens provides a mock function with given fields: email
func (_m *AuthServiceI) GenerateJwtAndSessionTokens(email string) (string, auth.SessionTokenI, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJwtAndSessionTokens")
	}

	var r0 string
	var r1 auth.SessionTokenI
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, auth.SessionTokenI, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) auth.SessionTokenI); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(auth.SessionTokenI)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RefreshJwtAndSessionTokens provides a mock function with given fields: sessionTokenId
func (_m *AuthServiceI) RefreshJwtAndSessionTokens(sessionTokenId uuid.UUID) (string, auth.SessionTokenI, error) {
	ret := _m.Called(sessionTokenId)

	if len(ret) == 0 {
		panic("no return value specified for RefreshJwtAndSessionTokens")
	}

	var r0 string
	var r1 auth.SessionTokenI
	var r2 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (string, auth.SessionTokenI, error)); ok {
		return rf(sessionTokenId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(sessionTokenId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) auth.SessionTokenI); ok {
		r1 = rf(sessionTokenId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(auth.SessionTokenI)
		}
	}

	if rf, ok := ret.Get(2).(func(uuid.UUID) error); ok {
		r2 = rf(sessionTokenId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TokenIsValid provides a mock function with given fields: tokenStr
func (_m *AuthServiceI) TokenIsValid(tokenStr string) bool {
	ret := _m.Called(tokenStr)

	if len(ret) == 0 {
		panic("no return value specified for TokenIsValid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(tokenStr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewAuthServiceI creates a new instance of AuthServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceI {
	mock := &AuthServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
