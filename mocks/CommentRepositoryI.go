// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	comment "github.com/vladovsiychuk/microservice-demo-go/internal/comment"

	uuid "github.com/google/uuid"
)

// CommentRepositoryI is an autogenerated mock type for the CommentRepositoryI type
type CommentRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *CommentRepositoryI) Create(_a0 comment.CommentI) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(comment.CommentI) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: commentId
func (_m *CommentRepositoryI) FindById(commentId uuid.UUID) (comment.CommentI, error) {
	ret := _m.Called(commentId)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 comment.CommentI
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (comment.CommentI, error)); ok {
		return rf(commentId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) comment.CommentI); ok {
		r0 = rf(commentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(comment.CommentI)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(commentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCommentsByPostId provides a mock function with given fields: postId
func (_m *CommentRepositoryI) FindCommentsByPostId(postId uuid.UUID) ([]comment.CommentI, error) {
	ret := _m.Called(postId)

	if len(ret) == 0 {
		panic("no return value specified for FindCommentsByPostId")
	}

	var r0 []comment.CommentI
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]comment.CommentI, error)); ok {
		return rf(postId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []comment.CommentI); ok {
		r0 = rf(postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comment.CommentI)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *CommentRepositoryI) Update(_a0 comment.CommentI) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(comment.CommentI) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommentRepositoryI creates a new instance of CommentRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepositoryI {
	mock := &CommentRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
